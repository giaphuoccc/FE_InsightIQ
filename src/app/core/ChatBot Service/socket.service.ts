/* eslint-disable @typescript-eslint/no-explicit-any */
import { Injectable, NgZone } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { ChatMessage } from '../../components/widget-user/widget-user.component';
import { ProductData } from '../../components/widget-user/product-info/product-info.component';
import { ProductPromotionData } from '../../components/widget-user/product-promotion/product-promotion.component';

@Injectable({
  providedIn: 'root'
})
export class SocketService {
  private messageSubject = new Subject<ChatMessage>();
  private streamingIntervalId: any = null;

  constructor(private ngZone: NgZone) {}

  /* ------------------------------ SOCKET MOCK ------------------------------ */
  connect(): void {
    console.log('[MOCK] SocketService: connect() called');
  }

  disconnect(): void {
    console.log('[MOCK] SocketService: disconnect() called');
    this.cancelStreaming();
  }

  /* -------------------------- USER ‚Üí BOT MESSAGE --------------------------- */
  sendMessage(data: any): void {
    const userMessageText: string = data.text;
    this.cancelStreaming();
  
    const finalBotResponse: ChatMessage = this.generateMockBotResponse(userMessageText);
  
    switch (finalBotResponse.type) {
      case 'text':
        this.streamTextResponse(finalBotResponse);
        break;
      case 'productComparison':
        this.streamProductComparisonResponse(finalBotResponse);
        break;
      case 'productInfo':
        this.streamProductInfoResponse(finalBotResponse);
        break;
      case 'productPromotion':    // G·ªçi h√†m stream khuy·∫øn m√£i
        this.streamProductPromotionResponse(finalBotResponse);
        break;
      default:
        this.streamTextResponse(finalBotResponse);
    }
  }  

  /* --------------------------- STREAMING HELPERS --------------------------- */
  private showThinkingThenSend(msg: ChatMessage): void {
    const thinkingMsg: ChatMessage = {
      id: msg.id ?? this.generateId(),
      sender: 'bot',
      type: 'text',
      content: '...',
      timestamp: new Date()
    };
    this.messageSubject.next(thinkingMsg);

    this.streamingIntervalId = setTimeout(() => {
      this.ngZone.run(() => {
        this.messageSubject.next(msg);
        this.streamingIntervalId = null;
      });
    }, 800);
  }

  listenForMessages(): Observable<ChatMessage> {
    return this.messageSubject.asObservable();
  }

  private streamTextResponse(finalResponse: ChatMessage): void {
    const fullContent = finalResponse.content as string;
    let rendered = '';
    const id = finalResponse.id ?? this.generateId();
    let idx = 0;
    const speed = 80;

    this.messageSubject.next({ ...finalResponse, content: '...', id });

    this.streamingIntervalId = setTimeout(() => {
      this.streamingIntervalId = setInterval(() => {
        this.ngZone.run(() => {
          if (idx < fullContent.length) {
            rendered += fullContent[idx++];
            this.messageSubject.next({
              ...finalResponse,
              content: rendered,
              id
            });
          } else {
            this.cancelStreaming();
          }
        });
      }, speed);
    }, 200);
  }

/** Stream so s√°nh: typing r·ªìi ‚Äúl·∫≠t‚Äù th√†nh b·∫£ng ‚Äî ch·ªâ 1 tin nh·∫Øn */
private streamProductComparisonResponse(finalResponse: ChatMessage): void {
  /* --- unpack --- */
  const { intro, products, conclusion } = finalResponse.content as {
    intro: string;
    products: any[];
    conclusion: string;
  };

  /* --- x√¢y chu·ªói ƒë·ªÉ g√µ --- */
  const toLines = (p: any) => {
    const spec = p.specifications.map((s: any) => `- ${s.label}: ${s.value}`).join('\n');
    return `\n\n${p.name.toUpperCase()}  (Gi√°: ${p.price.toLocaleString()}‚Ç´)\n${p.shortDescription}\n${spec}`;
  };
  const fullText = `${intro}\n${products.map(toLines).join('')}\n\n${conclusion}`;

  /* --- ID duy nh·∫•t cho c·∫£ qu√° tr√¨nh --- */
  const id = finalResponse.id ?? this.generateId();

  /* --- 1. g·ª≠i placeholder --- */
  const typingMsg: ChatMessage = {
    id,
    sender: 'bot',
    type: 'text',
    content: '...',
    timestamp: new Date()
  };
  this.messageSubject.next(typingMsg);

  /* --- 2. g√µ k√Ω t·ª± --- */
  let rendered = '';
  let idx = 0;
  const speed = 10;
  this.streamingIntervalId = setTimeout(() => {
    this.streamingIntervalId = setInterval(() => {
      this.ngZone.run(() => {
        if (idx < fullText.length) {
          rendered += fullText[idx++];
          this.messageSubject.next({ ...typingMsg, content: rendered });
        } else {
          this.cancelStreaming();          // d·ª´ng g√µ
          sendFinalObject();               // l·∫≠t sang b·∫£ng
        }
      });
    }, speed);
  }, 200);

  
  
  /* --- 3. thay th·∫ø b·∫±ng b·∫£ng so s√°nh (c√πng id) --- */
  const sendFinalObject = () => {
    const compMsg: ChatMessage = {
      ...finalResponse,
      id,                                // GI·ªÆ C√ôNG ID!
      timestamp: new Date()
    };
    this.messageSubject.next(compMsg);
  };
}

/* ---------------------- 1Ô∏è‚É£ STREAM 1-PRODUCT ---------------------- */
private streamProductInfoResponse(finalResponse: ChatMessage): void {
  /* --- chu·∫©n b·ªã n·ªôi dung ƒë·ªÉ g√µ --- */
  const p = finalResponse.content as ProductData;
  const specLines =
    p.specifications?.map(s => `- ${s.label}: ${s.value}`).join('\n') ?? '';
  const fullText = `${p.name.toUpperCase()}  (Gi√°: ${p.price.toLocaleString()}‚Ç´)
${p.shortDescription ?? ''}
${specLines}`;

  /* --- d√πng chung 1 id su·ªët qu√° tr√¨nh --- */
  const id = finalResponse.id ?? this.generateId();

  /* --- b∆∞·ªõc 1: placeholder '...' --- */
  const typingMsg: ChatMessage = {
    id,
    sender: 'bot',
    type: 'text',
    content: '...',
    timestamp: new Date()
  };
  this.messageSubject.next(typingMsg);

  /* --- b∆∞·ªõc 2: g√µ t·ª´ng k√Ω t·ª± --- */
  let rendered = '';
  let idx = 0;
  const speed = 15;                          // ch·∫≠m h∆°n x√≠u v√¨ chu·ªói ng·∫Øn
  this.streamingIntervalId = setTimeout(() => {
    this.streamingIntervalId = setInterval(() => {
      this.ngZone.run(() => {
        if (idx < fullText.length) {
          rendered += fullText[idx++];
          this.messageSubject.next({ ...typingMsg, content: rendered });
        } else {
          this.cancelStreaming();            // ng·ª´ng g√µ
          sendFinalObject();                 // l·∫≠t sang component
        }
      });
    }, speed);
  }, 200);

  /* --- b∆∞·ªõc 3: thay b·∫±ng object productInfo --- */
  const sendFinalObject = () => {
    const infoMsg: ChatMessage = {
      ...finalResponse,
      id,                                    // GI·ªÆ C√ôNG ID!
      timestamp: new Date()
    };
    this.messageSubject.next(infoMsg);
  };
}

/** Stream khuy·∫øn m√£i: typing r·ªìi ‚Äúl·∫≠t‚Äù th√†nh b·∫£ng ‚Äî ch·ªâ 1 tin nh·∫Øn */
private streamProductPromotionResponse(finalResponse: ChatMessage): void {
  /* --- unpack --- */
  const { productName, promotionDescription, validUntil } = finalResponse.content as ProductPromotionData;

  /* --- x√¢y chu·ªói ƒë·ªÉ g√µ --- */
  const fullText = `
üéÅ Khuy·∫øn m√£i cho s·∫£n ph·∫©m: ${productName}

M√¥ t·∫£ khuy·∫øn m√£i: ${promotionDescription}

√Åp d·ª•ng ƒë·∫øn: ${validUntil ? validUntil : 'Kh√¥ng c√≥ th√¥ng tin'}
`;

  /* --- ID duy nh·∫•t cho c·∫£ qu√° tr√¨nh --- */
  const id = finalResponse.id ?? this.generateId();

  /* --- 1. g·ª≠i placeholder --- */
  const typingMsg: ChatMessage = {
    id,
    sender: 'bot',
    type: 'text',
    content: '...',
    timestamp: new Date()
  };
  this.messageSubject.next(typingMsg);

  /* --- 2. g√µ k√Ω t·ª± --- */
  let rendered = '';
  let idx = 0;
  const speed = 10; // t·ªëc ƒë·ªô g√µ k√Ω t·ª±
  this.streamingIntervalId = setTimeout(() => {
    this.streamingIntervalId = setInterval(() => {
      this.ngZone.run(() => {
        if (idx < fullText.length) {
          rendered += fullText[idx++];
          this.messageSubject.next({ ...typingMsg, content: rendered });
        } else {
          this.cancelStreaming();          // d·ª´ng g√µ
          sendFinalObject();               // l·∫≠t sang b·∫£ng
        }
      });
    }, speed);
  }, 200);

  /* --- 3. thay th·∫ø b·∫±ng b·∫£ng khuy·∫øn m√£i (c√πng id) --- */
  const sendFinalObject = () => {
    const promoMsg: ChatMessage = {
      ...finalResponse,
      id,                                // GI·ªÆ C√ôNG ID!
      timestamp: new Date()
    };
    this.messageSubject.next(promoMsg);
  };
}





  /* --------------------------- MOCK BOT LOGIC ------------------------------ */
  private generateMockBotResponse(userMessage: string): ChatMessage {
    const lower = userMessage.toLowerCase().trim();
    const now = new Date();
    const id = this.generateId();

    /* --- CH√ÄO H·ªéI --- */
    if (/^(xin ch√†o|ch√†o|hello)/.test(lower)) {
      return {
        id,
        sender: 'bot',
        type: 'text',
        content:
          'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ c√°c s·∫£n ph·∫©m Samsung?',
        timestamp: now
      };
    }

    /* --- SO S√ÅNH S23‚ÄìS24 --- */
    if (lower.includes('so s√°nh') && lower.includes('s23') && lower.includes('s24')) {
      return {
        id,
        sender: 'bot',
        type: 'productComparison',
        content: {
          intro: 'So s√°nh gi·ªØa Samsung Galaxy S23 v√† S24:',
          products: [
            {
              name: 'Samsung Galaxy S23',
              sku: 'SGS23-001',
              category: 'Smartphone',
              shortDescription:
                'M√†n h√¨nh Dynamic AMOLED 2X, chip Snapdragon 8 Gen 2, camera 50 MP.',
              specifications: [
                { label: 'M√†n h√¨nh', value: '6.1‚Ä≥ FHD+ 120 Hz' },
                { label: 'Chip', value: 'Snapdragon 8 Gen 2 for Galaxy' },
                { label: 'Pin', value: '3 900 mAh' },
                {
                  label: 'Camera',
                  value: '50 MP + 12 MP + 10 MP'
                }
              ],
              warranty: '12 th√°ng ch√≠nh h√£ng',
              price: 16_990_000,
              promotion: 'Gi·∫£m 2 tri·ªáu + t·∫∑ng ·ªëp l∆∞ng ch√≠nh h√£ng',
              stockStatus: 'C√≤n h√†ng',
              policies: {
                return: 'ƒê·ªïi tr·∫£ trong 30 ng√†y',
                shipping: 'Mi·ªÖn ph√≠ giao h√†ng',
                payment: 'H·ªó tr·ª£ tr·∫£ g√≥p 0 %'
              }
            },
            {
              name: 'Samsung Galaxy S24',
              sku: 'SGS24-001',
              category: 'Smartphone',
              shortDescription:
                'Chip Snapdragon 8 Gen 3, Galaxy AI, m√†n h√¨nh s√°ng h∆°n.',
              specifications: [
                { label: 'M√†n h√¨nh', value: '6.2‚Ä≥ FHD+ 120 Hz' },
                { label: 'Chip', value: 'Snapdragon 8 Gen 3 for Galaxy' },
                { label: 'Pin', value: '4 000 mAh' },
                { label: 'Camera', value: '50 MP (AI n√¢ng cao)' }
              ],
              warranty: '12 th√°ng ch√≠nh h√£ng',
              price: 22_990_000,
              promotion: 'Gi·∫£m 1 tri·ªáu + Samsung Care+ 1 nƒÉm',
              stockStatus: 'C√≤n h√†ng',
              policies: {
                return: 'ƒê·ªïi tr·∫£ trong 30 ng√†y',
                shipping: 'Mi·ªÖn ph√≠ giao h√†ng',
                payment: 'H·ªó tr·ª£ tr·∫£ g√≥p 0 %'
              }
            }
          ],
          conclusion:
            'Galaxy S24 c√≥ nhi·ªÅu c·∫£i ti·∫øn v·ªÅ hi·ªáu nƒÉng, m√†n h√¨nh v√† camera so v·ªõi S23.'
        },
        timestamp: now
      };
    }

    /* --- TH√îNG TIN T·ª™NG S·∫¢N PH·∫®M --- */
if (lower.includes('s24') && !lower.includes('so s√°nh') && !lower.includes('khuy·∫øn m√£i')) {
  const productData: ProductData = {
    name: 'Samsung Galaxy S24',
    sku: 'SGS24-001',
    category: 'Smartphone',
    shortDescription:
      'Flagship 2024 v·ªõi Snapdragon 8 Gen 3, Galaxy AI, m√†n h√¨nh 6.2‚Ä≥ 120 Hz.',
    specifications: [
      { label: 'M√†n h√¨nh', value: '6.2‚Ä≥ FHD+ Dynamic AMOLED 2X 120 Hz' },
      { label: 'Chip', value: 'Snapdragon 8 Gen 3 for Galaxy' },
      { label: 'Pin', value: '4 000 mAh, s·∫°c nhanh 45 W' },
      { label: 'Camera', value: '50 MP + 12 MP + 10 MP' }
    ],
    comment: 'Galaxy S24 l√† m·ªôt s·ª± n√¢ng c·∫•p v∆∞·ª£t tr·ªôi so v·ªõi c√°c m·∫´u tr∆∞·ªõc ƒë√≥, ƒë·∫∑c bi·ªát v·ªõi c·∫£i ti·∫øn v·ªÅ hi·ªáu nƒÉng v√† camera.',
    intro: 'Samsung Galaxy S24 l√† m·ªôt thi·∫øt b·ªã r·∫•t ƒë·∫πp v√† lung linh, mang ƒë·∫øn nhi·ªÅu t√≠nh nƒÉng v∆∞·ª£t tr·ªôi cho ng∆∞·ªùi s·ª≠ d·ª•ng.',
    warranty: '12 th√°ng ch√≠nh h√£ng',
    price: 22_990_000,
    promotion: 'Gi·∫£m 1 tri·ªáu + Samsung Care+ 1 nƒÉm',
    stockStatus: 'C√≤n h√†ng',
    policies: {
      return: 'ƒê·ªïi tr·∫£ trong 30 ng√†y',
      shipping: 'Mi·ªÖn ph√≠ giao h√†ng',
      payment: 'H·ªó tr·ª£ tr·∫£ g√≥p 0 %'
    }
  };

  return {
    id,
    sender: 'bot',
    type: 'productInfo',
    content: productData,
    timestamp: now
  };
}

    if (lower.includes('s23') && !lower.includes('so s√°nh') && !lower.includes('khuy·∫øn m√£i')) {
      const productData: ProductData = {
        name: 'Samsung Galaxy S23',
        sku: 'SGS23-001',
        category: 'Smartphone',
        shortDescription:
          'Flagship 2023 nh·ªè g·ªçn, Snapdragon 8 Gen 2, camera 50 MP.',
        specifications: [
          { label: 'M√†n h√¨nh', value: '6.1‚Ä≥ FHD+ Dynamic AMOLED 2X 120 Hz' },
          { label: 'Chip', value: 'Snapdragon 8 Gen 2 for Galaxy' },
          { label: 'Pin', value: '3 900 mAh, s·∫°c nhanh 25 W' },
          { label: 'Camera', value: '50 MP + 12 MP + 10 MP' }
        ],
        warranty: '12 th√°ng ch√≠nh h√£ng',
        price: 16_990_000,
        promotion: 'Gi·∫£m 2 tri·ªáu + ·ªëp l∆∞ng ch√≠nh h√£ng',
        stockStatus: 'C√≤n h√†ng',
        policies: {
          return: 'ƒê·ªïi tr·∫£ trong 30 ng√†y',
          shipping: 'Mi·ªÖn ph√≠ giao h√†ng',
          payment: 'H·ªó tr·ª£ tr·∫£ g√≥p 0 %'
        }
      };

      return {
        id,
        sender: 'bot',
        type: 'productInfo',
        content: productData,
        timestamp: now
      };
    }

    // /* --- KHUY·∫æN M√ÉI --- */
    // if (lower.includes('khuy·∫øn m√£i') && lower.includes('s23')) {
    //   const promoData: ProductPromotionData = {
    //     productName: 'Samsung Galaxy S23',
    //     promotionDescription:
    //       'Gi·∫£m tr·ª±c ti·∫øp 2 000 000 VNƒê + tr·∫£ g√≥p 0 % + t·∫∑ng ·ªëp l∆∞ng Samsung ch√≠nh h√£ng.',
    //     discountedPrice: 14_990_000,
    //     validUntil: `30/${now.getMonth() + 1}/${now.getFullYear()}`
    //   };

    //   return {
    //     id,
    //     sender: 'bot',
    //     type: 'productPromotion',
    //     content: promoData,
    //     timestamp: now
    //   };
    // }

   /* --- KHUY·∫æN M√ÉI --- */
if (lower.includes('khuy·∫øn m√£i') && lower.includes('s24')) {
  const promoData: ProductPromotionData = {
    productName: 'Samsung Galaxy S24',
    promotionDescription:
      'Gi·∫£m tr·ª±c ti·∫øp 1 000 000 VNƒê qua VNPAY + thu c≈© ƒë·ªïi m·ªõi + t·∫∑ng Samsung Care+ 1 nƒÉm.',
    originalPrice: 22_990_000,  // Gi√° g·ªëc
    discountedPrice: 21_990_000,  // Gi√° ∆∞u ƒë√£i sau khuy·∫øn m√£i
    discountPercentage: 4.35,  // Ph·∫ßn trƒÉm gi·∫£m gi√°
    gift: 'T·∫∑ng Samsung Care+ 1 nƒÉm',  // Qu√† t·∫∑ng
    validUntil: `30/${now.getMonth() + 1}/${now.getFullYear()}`,  // Ng√†y h·∫øt h·∫°n c·ªßa khuy·∫øn m√£i
    conditions: '√Åp d·ª•ng cho t·∫•t c·∫£ kh√°ch h√†ng mua Samsung Galaxy S24 qua VNPAY.', // ƒêi·ªÅu ki·ªán khuy·∫øn m√£i
    productImageUrl: 'path/to/image/s24-image.jpg',  // ·∫¢nh s·∫£n ph·∫©m (n·∫øu c√≥)
  };

  return {
    id,
    sender: 'bot',
    type: 'productPromotion',
    content: promoData,
    timestamp: now
  };
}


    if (lower.includes('khuy·∫øn m√£i')) {
      const promoData: ProductPromotionData = {
        productName: 'C√°c d√≤ng Galaxy',
        promotionDescription:
          'Gi·∫£m gi√° tr·ª±c ti·∫øp, tr·∫£ g√≥p 0 %, t·∫∑ng Galaxy Buds/Watch cho m·ªôt s·ªë model.',
        validUntil: `30/${now.getMonth() + 1}/${now.getFullYear()}`
      };

      return {
        id,
        sender: 'bot',
        type: 'productPromotion',
        content: promoData,
        timestamp: now
      };
    }

    /* --- M·∫∂C ƒê·ªäNH --- */
    return {
      id,
      sender: 'bot',
      type: 'text',
      content: `Xin l·ªói, t√¥i ch∆∞a hi·ªÉu ‚Äú${userMessage}‚Äù. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ th√¥ng tin, so s√°nh ho·∫∑c khuy·∫øn m√£i c·ªßa Galaxy S23/S24 nh√©?`,
      timestamp: now
    };
  }

  /* ------------------------------ UTILITY ------------------------------ */
  private generateId(): string {
    return Math.random().toString(36).substring(2, 15);
  }

  private cancelStreaming(): void {
    if (this.streamingIntervalId) {
      clearInterval(this.streamingIntervalId);
      clearTimeout(this.streamingIntervalId);
      this.streamingIntervalId = null;
    }
  }

  /** Cho ph√©p component d·ª´ng lu·ªìng stream hi·ªán t·∫°i */
  public cancelCurrentStream(): void {
    this.cancelStreaming();
  }
}
